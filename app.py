from flask import Flask, render_template, request, flash, redirect, url_for, send_file, jsonify
from config import config
from peticao_service import gerar_peticao, salvar_peticao
import os

def create_app(config_name=None):
    app = Flask(__name__)
    
    # Configura√ß√£o
    config_name = config_name or os.environ.get('FLASK_CONFIG', 'default')
    app.config.from_object(config[config_name])
    
    # Rotas
    @app.route('/')
    def index():
        return render_template('index.html')
    
    @app.route('/quem-somos')
    def quem_somos():
        return render_template('quem-somos.html')
    
    @app.route('/nucleo')
    def nucleo():
        return render_template('nucleo.html')
    
    @app.route('/eventos')
    def eventos():
        # Lista de eventos
        eventos_lista = [
            {
                'data': '15 JUN',
                'titulo': 'Workshop de Direito Desportivo',
                'descricao': 'Introdu√ß√£o aos conceitos b√°sicos do Direito Desportivo e suas aplica√ß√µes pr√°ticas.',
                'local': 'IDP - Audit√≥rio Principal'
            },
            {
                'data': '22 JUN',
                'titulo': 'Palestra: Justi√ßa Desportiva no Brasil',
                'descricao': 'An√°lise do sistema de justi√ßa desportiva brasileiro e casos pr√°ticos.',
                'local': 'IDP - Sala de Confer√™ncias'
            },
            {
                'data': '05 JUL',
                'titulo': 'Mesa Redonda: Atleta e Seus Direitos',
                'descricao': 'Discuss√£o sobre os direitos fundamentais dos atletas e prote√ß√£o jur√≠dica.',
                'local': 'IDP - Audit√≥rio Principal'
            },
            {
                'data': '12 JUL',
                'titulo': 'Oficina Pr√°tica: Elabora√ß√£o de Defesas',
                'descricao': 'Treinamento pr√°tico para elabora√ß√£o de pe√ßas de defesa em tribunais desportivos.',
                'local': 'IDP - Laborat√≥rio Jur√≠dico'
            }
        ]
        return render_template('eventos.html', eventos=eventos_lista)
    
    @app.route('/educacao')
    def educacao():
        # Conte√∫dos educacionais
        conteudos = [
            {
                'icone': 'üìö',
                'titulo': 'O que √© Direito Desportivo?',
                'descricao': 'O Direito Desportivo √© o ramo jur√≠dico que regula as rela√ß√µes esportivas, abrangendo desde contratos de atletas at√© quest√µes disciplinares e de organiza√ß√£o esportiva.'
            },
            {
                'icone': '‚öñÔ∏è',
                'titulo': 'Justi√ßa Desportiva',
                'descricao': 'Sistema aut√¥nomo que julga quest√µes relacionadas √†s infra√ß√µes disciplinares e √†s competi√ß√µes esportivas, garantindo o fair play e a aplica√ß√£o das regras.'
            },
            {
                'icone': 'üìã',
                'titulo': 'Contratos de Atletas',
                'descricao': 'Regulamenta√ß√£o espec√≠fica para v√≠nculos entre atletas e clubes, incluindo direitos trabalhistas, transfer√™ncias e cl√°usulas de rescis√£o.'
            },
            {
                'icone': 'üèÜ',
                'titulo': 'Direitos dos Atletas',
                'descricao': 'Prote√ß√£o jur√≠dica aos profissionais do esporte, incluindo direitos trabalhistas, previdenci√°rios e prote√ß√£o contra discrimina√ß√£o.'
            },
            {
                'icone': 'üîç',
                'titulo': 'Doping e Controle',
                'descricao': 'Regulamenta√ß√£o sobre subst√¢ncias proibidas, procedimentos de controle antidoping e consequ√™ncias legais das infra√ß√µes.'
            },
            {
                'icone': 'üåê',
                'titulo': 'Direito Desportivo Internacional',
                'descricao': 'Normas que regem competi√ß√µes internacionais, transfer√™ncias entre pa√≠ses e resolu√ß√£o de conflitos atrav√©s do CAS (Corte Arbitral do Esporte).'
            }
        ]
        return render_template('educacao.html', conteudos=conteudos)
    
    @app.route('/contato', methods=['GET', 'POST'])
    def contato():
        if request.method == 'POST':
            # Verificar se √© uma solicita√ß√£o de gera√ß√£o de peti√ß√£o
            if 'gerar_peticao' in request.form:
                return processar_peticao()
        
        return render_template('contato.html')
    
    def processar_peticao():
        """Processa formul√°rio de gera√ß√£o de peti√ß√£o"""
        try:
            # Coletar dados do formul√°rio
            dados_cliente = {
                'nome': request.form.get('nome_peticao'),
                'clube': request.form.get('clube'),
                'competicao': request.form.get('competicao'),
                'acusacao': request.form.get('acusacao'),
                'contexto': request.form.get('contexto'),
                'pedidos': request.form.get('pedidos')
            }
            
            # Validar campos obrigat√≥rios
            campos_obrigatorios = ['nome', 'clube', 'competicao', 'acusacao', 'contexto', 'pedidos']
            for campo in campos_obrigatorios:
                if not dados_cliente[campo]:
                    flash(f'O campo {campo.replace("_", " ").title()} √© obrigat√≥rio.', 'error')
                    return render_template('contato.html')
            
            # Gerar peti√ß√£o usando IA
            resultado_peticao = gerar_peticao(dados_cliente)
            
            if resultado_peticao['sucesso']:
                nome_base = resultado_peticao['nome_arquivo']
                
                # Salvar peti√ß√£o nos dois formatos
                resultado_arquivo = salvar_peticao(
                    resultado_peticao['conteudo'], 
                    nome_base
                )
                
                if resultado_arquivo['sucesso']:
                    flash(f'üéâ Peti√ß√£o gerada com sucesso pelo Justinho!', 'success')
                    
                    # Gerar os dois links
                    download_docx = url_for('download_peticao', nome_arquivo=resultado_arquivo['arquivos']['docx'])
                    download_pdf = url_for('download_peticao', nome_arquivo=resultado_arquivo['arquivos']['pdf'])
                    
                    return render_template(
                        'contato.html',
                        download_docx=download_docx,
                        download_pdf=download_pdf,
                        nome_arquivo_base=nome_base
                    )
                else:
                    flash('‚ùå Erro ao salvar peti√ß√£o. Tente novamente.', 'error')
            else:
                flash(f'‚ùå Erro ao gerar peti√ß√£o: {resultado_peticao["erro"]}', 'error')
        
        except Exception as e:
            flash(f'‚ùå Erro interno: {str(e)}', 'error')
        
        return render_template('contato.html')
    
    @app.route('/download/<nome_arquivo>')
    def download_peticao(nome_arquivo):
        """Permite download da peti√ß√£o gerada"""
        try:
            caminho_arquivo = os.path.join('static', 'peticoes', nome_arquivo)
            if os.path.exists(caminho_arquivo):
                return send_file(caminho_arquivo, as_attachment=True)
            else:
                flash('‚ùå Arquivo n√£o encontrado.', 'error')
                return render_template('contato.html')  # Renderizar ao inv√©s de redirect
        except Exception as e:
            flash(f'‚ùå Erro no download: {str(e)}', 'error')
            return render_template('contato.html')  # Renderizar ao inv√©s de redirect
    
    @app.route('/status_peticao', methods=['POST'])
    def status_peticao():
        """Endpoint para verificar status da gera√ß√£o (AJAX)"""
        return jsonify({'status': 'processando'})
    
    # Tratamento de erro 404
    @app.errorhandler(404)
    def page_not_found(error):
        return render_template('404.html'), 404
    
    return app

if __name__ == '__main__':
    app = create_app()
    app.run(debug=True)